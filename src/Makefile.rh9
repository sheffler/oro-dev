#
# Makefile for APVM on Redhat 9
#

#
# Where the verilog VPI header files live
#

VPIINC = /usr/include/

#
# Where the Python build home is
#

PYHOME = /home/sheffler/src/Python-2.3.3


CC 	= gcc
RM 	= rm
AR 	= ar
RANLIB 	= ranlib
LD 	= ld

INC = -I$(VPIINC) -I$(PYHOME) -I$(PYHOME)/Include/

LIBPY = $(PYHOME)/libpython2.3.a

# Use position independent code option (-fPIC) for shared library
# -fno-builtin compiler option suppresses warnings generated by conflicts
# between <string.h> and the compiler built-in functions

CFLAGS = $(INC) -g -DDEBUG -fPIC -fno-builtin

OBJS =  apvm_core.o \
	apvm_malloc.o \
	apvm_msg.o \
	apvm_calltf.o \
	apvm_vpi.o

#
# Default target
#

all: libapvmvpi.a libapvmvpi.so
	-$(RM) $(OBJS)


#
# A library containing just the functions defined here
#
libapvmvpi.a: $(OBJS)
	$(AR) ruv libapvmvpi.a $(OBJS)
	-$(RANLIB) libapvmvpi.a

#
# A DLL containing these functions and all of LIBAPVM.
# Suitable for dynamic linking w/ Verilog with +loadvpi 
#
libapvmvpi.so: $(OBJS)
	gcc -shared $(OBJS) $(LIBPY) -ldl -lpthread -lutil -lm -ltix8.1.8.3 -ltk8.3 -ltcl8.3 -o libapvmvpi.so




#
# Build the vpidefs from a standard vpi_user include file
#

apvm_vpidefs.h: $(VPIINC)/vpi_user.h
	python ../python/vpidefs.py $(VPIINC)/vpi_user.h > apvm_vpidefs.h

#
# record this dependency for make
#

apvm_calltf.o: apvm_vpidefs.h


#
# Clean up the dir
#

clean:
	-rm *.o
	-rm libapvmvpi.a libapvmvpi.so libapvmvpi.vpl
	-rm apvm_vpidefs.h
	-rm *.*~
	-rm *.~*~


